     1                                  bits 32
     2                                  
     3                                  global start
     4                                  extern exit, printf
     5                                  
     6                                  import exit msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  
     9                                  ;Se da un sir de octeti S. Sa se obtina sirul D1 ce contine toate numerele pare din S si sirul D2 ce contine toate numerele impare din S
    10                                  
    11                                  segment data use32 class = data
    12 00000000 FFAB13121415CCDDBE-         s db 0xFF, 0xAB, 0x13, 0x12, 0x14, 0x15, 0xCC, 0xDD, 0xBE, 0xEB
    12 00000009 EB                 
    13                                      len equ $-s
    14                                              ;lungimea sirului s
    15 0000000A 00                          d1 db 0 ;numere pare
    16 0000000B 00                          d2 db 0 ;numere impare
    17                                      
    18 0000000C 4E756D657265207061-         output_d1 db 'Numere pare: %s', 0
    18 00000015 72653A20257300     
    19 0000001C 4E756D626572652069-         output_d2 db 'Numbere impare: %s', 0
    19 00000025 6D706172653A202573-
    19 0000002E 00                 
    20                                  
    21                                  segment code use32 class = code
    22                                      start:
    23 00000000 B90A000000                      mov ecx, len    ;lungimea sirului, pentru instructiunea de ciclare
    24 00000005 BE00000000                      mov esi, 0 ;pentru d1, nr pare
    25 0000000A BF00000000                      mov edi, 0 ;pentru d2, nr impare
    26 0000000F BB00000000                      mov ebx, 0 ;parcurgerea sirului initial
    27                                          
    28                                          repeta:
    29 00000014 8A83[00000000]                      mov al, [s+ ebx]
    30 0000001A A801                                test al, 1
    31 0000001C 7402                                jz d1_add
    32 0000001E EB09                                jmp d2_add
    33                                              
    34                                              d1_add:
    35 00000020 8886[0A000000]                          mov [d1+esi], al
    36 00000026 46                                      inc esi
    37 00000027 EB09                                    jmp next_it
    38                                                  
    39                                              d2_add:
    40 00000029 8887[0B000000]                          mov [d2+edi], al
    41 0000002F 47                                      inc edi
    42 00000030 EB00                                    jmp next_it
    43                                                 
    44                                              next_it:
    45 00000032 43                                      inc ebx
    46 00000033 75DF                                    jnz repeta
    47                                          
    48 00000035 FF35[0A000000]                  push dword [d1]
    49 0000003B 68[0C000000]                    push dword output_d1
    50 00000040 FF15[00000000]                  call [printf]
    51 00000046 83C408                          add esp, 4*2
    52                                          
    53 00000049 FF35[0B000000]                  push dword [d2]
    54 0000004F 68[1C000000]                    push dword output_d2
    55 00000054 FF15[00000000]                  call [printf]
    56 0000005A 83C408                          add esp, 4*2
    57                                          
    58 0000005D 6A00                            push dword 0
    59 0000005F FF15[00000000]                  call [exit]
