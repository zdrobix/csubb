     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  import exit msvcrt.dll
     7                                  
     8                                  segment data use32 class = data
     9                                  
    10 00000000 2B34326138345835            s1 DB '+', '4', '2', 'a', '8', '4', 'X', '5'
    11                                      lens1 EQU $-s1  ;lungimea sirului s1
    12                                      
    13 00000008 313233                      s2 DB '1', '2', '3'
    14                                      lens2 EQU $-s2  ;lungimea sirului s2
    15                                      
    16 0000000B 00<rept>                    d TIMES (lens1 + 1)/3 + lens2 DB 0 ;lens1 + 1 pentru ca si pozitia 0 = multiplu de 3
    17 00000011 06000000                    lend DD (lens1 + 1)/3 + lens2
    18                                      
    19 00000015 03                          lens1mul3 DB (lens1 + 1)/3
    20                                      
    21                                  segment code use32 class = code
    22                                  
    23                                      start:
    24                                      ;Se dau doua siruri de caractere S1 si S2. 
    25                                      ;Sa se construiasca sirul D prin concatenarea elementelor de pe pozitiile 
    26                                          ;multiplu de 3 din sirul S1 cu elementele sirului S2 in ordine inversa
    27                                          
    28 00000000 B900000000                  MOV ecx, 0                  ;eliberam ecx, pentru a pune variabila de contor in ecx
    29                                      
    30 00000005 BE[00000000]                MOV esi, s1                 ;esi = adresa sirului s1
    31 0000000A BF[08000000]                MOV edi, s2                 ;edi = adresa sirului s2
    32                                      
    33 0000000F BB[0B000000]                MOV ebx, d                  ;punem in ebx sirul nou creat
    34                                      
    35                                      ;se creaza  eticheta de concatenat
    36                                      concateneaza:
    37                                      
    38 00000014 3B0D[11000000]                  CMP ecx, [lend]         ;compara ecx cu lungimea asignata sirului D
    39 0000001A 741D                            JE end_program          ;se termina programul
    40                                      
    41 0000001C 3B0D[15000000]                  CMP ecx, [lens1mul3]    ;verifica daca s-au pus toate elementele ( de pe poz mul de 3) din sirul s1
    42 00000022 720A                            JB copiaza_s1
    43                                          
    44 00000024 8A4702                          MOV al, [edi+lens2-1]   ;se ia caracterul curent din s2
    45 00000027 8803                            MOV [ebx], al           ;se adauga la sfarsitul sirului D
    46                                          
    47 00000029 43                              INC ebx                 ;se trece la urmatoarea pozitie din sirul D
    48 0000002A 4F                              DEC edi                 ;se trece la precedentul termen din s2
    49 0000002B 41                              INC ecx                 ;se mareste contorul
    50                                          
    51 0000002C EBE6                            JMP concateneaza        ;se continua programul
    52                                          
    53                                      copiaza_s1:
    54                                      
    55 0000002E 8A06                            MOV al, [esi]           ;se ia caracterul curent din S1
    56 00000030 8803                            MOV [ebx], al           ;se adauga la sfarsitul sirului D
    57                                          
    58 00000032 43                              INC ebx                 ;se trece la urmatorul element din sirul D
    59 00000033 83C603                          ADD esi, 3              ;se trece la urmatorul termen pe pozitie multipla de 3 din s1
    60 00000036 41                              INC ecx                 ;se mareste contorul
    61                                          
    62 00000037 EBDB                            JMP concateneaza        ;se continua programul
    63                                  
    64                                      end_program:
    65                                      
    66 00000039 6A00                            push dword 0
    67 0000003B FF15[00000000]                  call [exit]
